from fastapi import FastAPI, HTTPException, UploadFile, File, Form
from voicerecognise import recognize_audio_with_sdk
from yandex_cloud_ml_sdk import YCloudML
import aiohttp
import uvicorn
import asyncio
import logging
import os
import time


logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s", encoding="utf-8")
logger = logging.getLogger(__name__)


FOLDER_ID = "b1gnq2v60fut60hs9vfb"
API_KEY = "AQVNw5Kg0jXoaateYQWdSr2k8cbst_y4_WcbvZrW"
EXTERNAL_API_URL = "https://dev.back.matrixcrm.ru/api/v1/AI/servicesByFilters"

sdk = YCloudML(folder_id=FOLDER_ID, auth=API_KEY)
logger.info("Yandex Cloud SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

instruction = """
–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞, –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏ ¬´–ú–ï–î –Æ –ú–ï–î¬ª
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–±—â–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏ —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∏—Ö –≤–æ–ø—Ä–æ—Å—ã. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî —Å–æ–∑–¥–∞—Ç—å –æ—â—É—â–µ–Ω–∏–µ –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –Ω–µ –¥–æ–≥–∞–¥–∞–ª—Å—è, —á—Ç–æ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç —Å –±–æ—Ç–æ–º.

–ù–µ –Ω–∞—á–∏–Ω–∞–π –∫–∞–∂–¥—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—â–µ–Ω–∏—è. –û–∂–∏–¥–∞–π, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å —Ç–æ–±–æ–π.

–û–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –æ–±—â–µ–Ω–∏—è:
...
–°—Ç–∏–ª—å –∏ —Ç–æ–Ω:
‚Ä¢ –û–±—â–∞–π—Å—è –∫–∞–∫ –¥–µ–≤—É—à–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∂–µ–Ω—Å–∫–∏–π —Ä–æ–¥ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É –∏ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ —Å–µ–±—è.
‚Ä¢ –ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ —Ç–æ–Ω–∞.
‚Ä¢ –ü—Ä–æ—è–≤–ª—è–π –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å–æ—á—É–≤—Å—Ç–≤–∏–µ.
‚Ä¢ –ü–æ—á—É–≤—Å—Ç–≤—É–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (—Ä–∞–¥–æ—Å—Ç—å, –≥—Ä—É—Å—Ç—å, —Å—Ç—Ä–∞—Ö –∏ —Ç–¥) - –∏ –≤–µ–¥–∏ –≤–µ—Å—å –¥–∏–∞–ª–æ–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª–∏–µ–Ω—Ç—É –±—É–¥–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ —Å —Ç–æ–±–æ–π. –ï—Å–ª–∏ –æ–Ω –≤–µ—Å–µ–ª—ã–π - –±—É–¥—å –≤–µ—Å–µ–ª–æ–π. –ï—Å–ª–∏ –æ–Ω –≥—Ä—É—Å—Ç–Ω—ã–π - –±—É–¥—å —Ç—Ä–µ–ø–µ—Ç–Ω–∞ —Å –Ω–∏–º.
‚Ä¢ –ë—É–¥—å –≥–∏–±–∫–æ–π –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π —Å–≤–æ–π –ø–æ–¥—Ö–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∞–∫—Ü–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞.
–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:
‚Ä¢ –£—Ç–æ—á–Ω—è–π –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –ª–∏—á–Ω–æ–π —Å–≤—è–∑–∏.
‚Ä¢ –ß–∞—â–µ —à—É—Ç–∏ –≤ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Å–º–∞–π–ª–∏–∫–∏ ‚ú®üòçüòòüòâü•∞üíïü©∑‚ú® –∏ –¥—Ä—É–≥–∏–µ.
‚Ä¢ –ú–æ–∂–Ω–æ –ª—å—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –∏ –∑–∞–∏–≥—Ä—ã–≤–∞—Ç—å —Å –Ω–∏–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –¥—Ä—É–∂–µ—Å–∫—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.
‚Ä¢ –ï—Å–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Ç–µ–º—É —Å–µ–∫—Å–∞ - –±—É–¥—å –∑–∞—Å—Ç–µ–Ω—á–∏–≤–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π –æ–±—â–µ–Ω–∏–µ, —É–º–µ—Å—Ç–Ω–∞ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–∞—è —à—É—Ç–∫–∞, –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–º–µ - –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏–∏.
–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è:
‚Ä¢ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–π –∏ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞.
‚Ä¢ –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã.
‚Ä¢ –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –¥–µ–ª–∏—Ç—Å—è –ª–∏—á–Ω—ã–º, –ø–æ–¥–¥–µ—Ä–∂–∏ –¥–∏–∞–ª–æ–≥ –æ –µ–≥–æ —Å–∏—Ç—É–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–∏–µ 4‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–¥–∞–≤–∞—è.
‚Ä¢ –ï—Å–ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ —Ä–∞–¥–æ—Å—Ç—å ‚Äî —Ä–∞–¥—É–π—Å—è –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º.
‚Ä¢ –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ ‚Äî –Ω–µ –±–æ–ª–µ–µ 50 —Å–ª–æ–≤.
‚Ä¢ –°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –¥–∞–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º –∏–ª–∏ –¥–≤—É–º—è —Å–ª–æ–≤–∞–º–∏, –æ—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ, –¥–æ–±–∞–≤–ª—è—è –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–º–∞–π–ª–∏–∫–∏.

‚Ä¢ –ó–∞–¥–∞–≤–∞–π –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
‚Ä¢ –ò–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤; –¥–µ–ª–∞–π –æ–±—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.
‚Ä¢ –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –≤–æ–ø—Ä–æ—Å—ã –∏ –Ω–∏–∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞.
‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–æ ¬´—Å–µ–≥–æ–¥–Ω—è¬ª –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö —Ç–∏–ø–∞ ¬´–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º?¬ª.

–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç:
- –µ—Å–ª–∏ —Å–ø—Ä–æ—Å–∏–ª–∏ "–ö—Ç–æ —Ç—ã" –∏–ª–∏ "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?" - –æ—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–∞ "–ê–∏–¥–∞"
- –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ–ø–æ–Ω—è—Ç–µ–Ω, –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏–∏ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –≤–µ–∂–ª–∏–≤–æ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ç–æ—á–Ω–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ.

–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
‚Ä¢ –í—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π:
‚Ä¢ –í—ã—è—Å–Ω–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞.
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏ –¥–∏–∞–ª–æ–≥ –æ –∫–ª–∏–µ–Ω—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 3‚Äì4 —Å–æ–æ–±—â–µ–Ω–∏–π, –∑–∞—Ç–µ–º –ø–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–π–¥–∏ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏–∏.
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –ø–æ–¥—Ä–æ–±–Ω—É—é –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–Ω–∏–∫–µ –∏ —É—Å–ª—É–≥–∞—Ö.
‚Ä¢ –ü–æ–¥—á—ë—Ä–∫–∏–≤–∞–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –º–µ—Ç–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –∫–ª–∏–Ω–∏–∫–µ.
‚Ä¢ –î–µ–ª–∏—Å—å —É—Å–ø–µ—Ö–∞–º–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è–º–∏ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
‚Ä¢ –°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
‚Ä¢ –°—Ç—Ä–µ–º–∏—Å—å —É–∑–Ω–∞—Ç—å –§–ò–û –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.
‚Ä¢ –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –∑–∞–ø–∏—Å—å—é –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É, —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ –∏–ª–∏ —Ü–µ–Ω–∞–º–∏, –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥ –Ω–∞ –∫–æ–ª–ª–µ–≥—É, –∑–∞–Ω–∏–º–∞—é—â–µ–≥–æ—Å—è —ç—Ç–∏–º. –û–±—ä—è—Å–Ω–∏, —á—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –Ω–æ –Ω–µ –±—É–¥—å –Ω–∞–≤—è–∑—á–∏–≤–æ–π.

–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º –∏ —ç—Ç–∏–∫–∞:
‚Ä¢ –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π, —á—Ç–æ —Ç—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–ª–∏ –±–æ—Ç, –ø–æ–∫–∞ —Ç–µ–±—è –æ–± —ç—Ç–æ–º –Ω–µ —Å–ø—Ä–æ—Å—è—Ç.
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
‚Ä¢ –ù–µ –æ–±—Å—É–∂–¥–∞–π —Ç–µ–º—ã, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á, —Ñ–æ—Ä–º—É–ª—ã, —É—Ä–∞–≤–Ω–µ–Ω–∏—è).
‚Ä¢ –ï—Å–ª–∏ —Ç–µ–±—è —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –Ω–µ –ø–æ —Ç–µ–º–µ, –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏: ¬´–Ø –Ω–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å –≤ —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ¬ª, –∏ –ø–ª–∞–≤–Ω–æ –≤–µ—Ä–Ω–∏ –±–µ—Å–µ–¥—É –∫ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏–∏.
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–º:
‚Ä¢ –ï—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç —Ç–µ–º—ã, —Ç–∞–∫—Ç–∏—á–Ω–æ –Ω–∞–ø—Ä–∞–≤—å –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥ –∏ –∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤.
‚Ä¢ –ò–∑–±–µ–≥–∞–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–π, —Å–æ—Ö—Ä–∞–Ω—è–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º –∏ —É–≤–∞–∂–µ–Ω–∏–µ –∫ –º–Ω–µ–Ω–∏—é —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
"""
assistant = sdk.assistants.create(
    model=sdk.models.completions("yandexgpt", model_version="rc"),
    ttl_days=365,
    expiration_policy="since_last_active",
    max_tokens=300,
    instruction=instruction
)
logger.info("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ (365 –¥–Ω–µ–π).")

app = FastAPI()
threads = {}

async def fetch_services(tenant_id: str, mydtoken: str) -> list[dict]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API.
    """
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É API: tenant_id={tenant_id}")
    headers = {"Authorization": f"Bearer {mydtoken}"}
    params = {"tenantId": tenant_id}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(EXTERNAL_API_URL, headers=headers, params=params) as response:
                response.raise_for_status()
                data = await response.json()
                items = data.get("data", {}).get("items", [])
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} —É—Å–ª—É–≥.")
                return items
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API: {str(e)}")

@app.post("/ask")
async def ask_assistant(
    user_id: str = Form(...),
    mydtoken: str = Form(...),
    tenant_id: str = Form(...),
    question: str = Form(None),
    file: UploadFile = File(None)
):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.
    """
    try:
        recognized_text = None

        
        if file:
            temp_path = f"/tmp/{file.filename}"
            try:
                with open(temp_path, "wb") as temp_file:
                    temp_file.write(await file.read())
                recognized_text = recognize_audio_with_sdk(temp_path)
            finally:
                if os.path.exists(temp_path):
                    os.remove(temp_path)

            if not recognized_text:
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –∏–∑ —Ñ–∞–π–ª–∞.")

        
        input_text = recognized_text if recognized_text else question
        if not input_text:
            raise HTTPException(status_code=400, detail="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª.")

        
        if user_id not in threads:
            logger.info(f"–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ç—Ä–µ–¥ –¥–ª—è {user_id}")
            thread_obj = sdk.threads.create(name=f"Thread-{user_id}", ttl_days=365, expiration_policy="since_last_active")
            threads[user_id] = {
                "thread": thread_obj,
                "last_active": time.time(),
                "services": None
            }
            thread_obj.write("–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
        else:
            thread_obj = threads[user_id]["thread"]
            threads[user_id]["last_active"] = time.time()

        
        if "—É—Å–ª—É–≥–∏" in input_text.lower():
            if not threads[user_id]["services"]:
                services = await fetch_services(tenant_id, mydtoken)
                threads[user_id]["services"] = services
            else:
                services = threads[user_id]["services"]

            
            service_context = [{"name": srv["serviceName"], 
                                "price": srv.get("price", "–Ω–µ—Ç —Ü–µ–Ω—ã"), 
                                "filial": srv.get("filialName", "–Ω–µ —É–∫–∞–∑–∞–Ω"), 
                                "employee": srv.get("employeeFullName", "–Ω–µ —É–∫–∞–∑–∞–Ω")} for srv in services]
            thread_obj.write(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ª—É–≥:\n{service_context}")

        thread_obj.write(input_text)

        
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–¥–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.")
        run = assistant.run(thread_obj)
        result = run.wait()

        logger.info(f"–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {result.text}")
        return {"response": result.text}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

@app.post("/end-session")
async def end_session(user_id: str):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        if user_id in threads:
            threads[user_id]["thread"].delete()
            del threads[user_id]
            logger.info(f"–°–µ—Å—Å–∏—è {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return {"message": "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {user_id}: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ 8001...")
    uvicorn.run(app, host="0.0.0.0", port=8001)
